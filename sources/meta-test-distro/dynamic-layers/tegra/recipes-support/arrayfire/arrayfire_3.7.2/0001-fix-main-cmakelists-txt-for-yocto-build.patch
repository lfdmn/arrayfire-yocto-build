From 751cceea65fbc7968aadbf0537d343eeb6a25e2f Mon Sep 17 00:00:00 2001
From: Damien LEFEVRE <lefevre.da@gmail.com>
Date: Thu, 17 Sep 2020 09:52:24 +0300
Subject: [PATCH 1/2] fix main cmakelists txt for yocto build

---
 CMakeLists.txt | 131 +++++++++++++++++++++++++++----------------------
 1 file changed, 73 insertions(+), 58 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index e1108c60..4e1a50fc 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -9,6 +9,17 @@ cmake_minimum_required(VERSION 3.5)
 
 project(ArrayFire VERSION 3.7.2 LANGUAGES C CXX)
 
+# Unset CMAKE_MODULE_PATH. Yocto populates it with missing folders. InternalUtils.cmake expects a 
+# single path and fails copying ${CMAKE_MODULE_PATH}/compilers.h
+unset(CMAKE_MODULE_PATH)
+
+if(AF_BIN2CPP_ONLY)
+  add_executable(bin2cpp ${ArrayFire_SOURCE_DIR}/CMakeModules/bin2cpp.cpp)
+  target_link_libraries(bin2cpp)
+  export(TARGETS bin2cpp FILE ${CMAKE_BINARY_DIR}/ImportExecutables.cmake)
+  return()
+endif()
+
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules")
 
 include(config_ccache)
@@ -298,83 +309,87 @@ write_basic_package_version_file(
   COMPATIBILITY SameMajorVersion
 )
 
-# This config file will be installed so we need to set the install_destination
-# path relitive to the install path
-set(INCLUDE_DIRS include)
-set(CMAKE_DIR ${AF_INSTALL_CMAKE_DIR})
-configure_package_config_file(
-  ${CMAKE_MODULE_PATH}/ArrayFireConfig.cmake.in
-  cmake/install/ArrayFireConfig.cmake
-  INSTALL_DESTINATION "${AF_INSTALL_CMAKE_DIR}"
-  PATH_VARS INCLUDE_DIRS CMAKE_DIR
-  )
+if(NOT ${AF_SKIP_PACKAGE})
+  # This config file will be installed so we need to set the install_destination
+  # path relitive to the install path
+  set(INCLUDE_DIRS include)
+  set(CMAKE_DIR ${AF_INSTALL_CMAKE_DIR})
+  configure_package_config_file(
+    ${CMAKE_MODULE_PATH}/ArrayFireConfig.cmake.in
+    cmake/install/ArrayFireConfig.cmake
+    INSTALL_DESTINATION "${AF_INSTALL_CMAKE_DIR}"
+    PATH_VARS INCLUDE_DIRS CMAKE_DIR
+    )
 
-install(FILES ${ArrayFire_BINARY_DIR}/cmake/install/ArrayFireConfig.cmake
-              ${ArrayFire_BINARY_DIR}/ArrayFireConfigVersion.cmake
-              DESTINATION ${AF_INSTALL_CMAKE_DIR}
-              COMPONENT cmake)
-
-if((USE_CPU_MKL OR USE_OPENCL_MKL) AND AF_INSTALL_STANDALONE)
-  if(TARGET MKL::ThreadingLibrary)
-    install(FILES
-      $<TARGET_FILE:MKL::ThreadingLibrary>
-      DESTINATION ${AF_INSTALL_LIB_DIR}
-      COMPONENT mkl_dependencies)
-  endif()
+  install(FILES ${ArrayFire_BINARY_DIR}/cmake/install/ArrayFireConfig.cmake
+                ${ArrayFire_BINARY_DIR}/ArrayFireConfigVersion.cmake
+                DESTINATION ${AF_INSTALL_CMAKE_DIR}
+                COMPONENT cmake)
 
-  if(NOT AF_WITH_STATIC_MKL AND TARGET MKL::Shared)
-    if(NOT WIN32)
+  if((USE_CPU_MKL OR USE_OPENCL_MKL) AND AF_INSTALL_STANDALONE)
+    if(TARGET MKL::ThreadingLibrary)
       install(FILES
-        $<TARGET_FILE:MKL::Interface>
+        $<TARGET_FILE:MKL::ThreadingLibrary>
         DESTINATION ${AF_INSTALL_LIB_DIR}
         COMPONENT mkl_dependencies)
     endif()
 
-    install(FILES
-      $<TARGET_FILE:MKL::Shared>
-      $<TARGET_FILE:MKL::ThreadLayer>
-      ${MKL_RUNTIME_KERNEL_LIBRARIES}
-
-      # This variable is used to add tbb.so.2 library because the main lib
-      # is a linker script and not a symlink so it cant be resolved using
-      # get_filename_component
-      ${AF_ADDITIONAL_MKL_LIBRARIES}
-      DESTINATION ${AF_INSTALL_LIB_DIR}
-      COMPONENT mkl_dependencies)
+    if(NOT AF_WITH_STATIC_MKL AND TARGET MKL::Shared)
+      if(NOT WIN32)
+        install(FILES
+          $<TARGET_FILE:MKL::Interface>
+          DESTINATION ${AF_INSTALL_LIB_DIR}
+          COMPONENT mkl_dependencies)
+      endif()
+
+      install(FILES
+        $<TARGET_FILE:MKL::Shared>
+        $<TARGET_FILE:MKL::ThreadLayer>
+        ${MKL_RUNTIME_KERNEL_LIBRARIES}
+
+        # This variable is used to add tbb.so.2 library because the main lib
+        # is a linker script and not a symlink so it cant be resolved using
+        # get_filename_component
+        ${AF_ADDITIONAL_MKL_LIBRARIES}
+        DESTINATION ${AF_INSTALL_LIB_DIR}
+        COMPONENT mkl_dependencies)
+    endif()
   endif()
-endif()
 
-# This file will be used to create the config file for the build directory.
-# These config files will be used by the examples to find the ArrayFire
-# libraries
-set(INCLUDE_DIRS "${ArrayFire_SOURCE_DIR}/include" "${ArrayFire_BINARY_DIR}/include")
-set(CMAKE_DIR "${ArrayFire_BINARY_DIR}/cmake")
-configure_package_config_file(
-  ${CMAKE_MODULE_PATH}/ArrayFireConfig.cmake.in
-  ArrayFireConfig.cmake
-  INSTALL_DESTINATION "${ArrayFire_BINARY_DIR}"
-  PATH_VARS INCLUDE_DIRS CMAKE_DIR
-  INSTALL_PREFIX "${ArrayFire_BINARY_DIR}"
-  )
+  # This file will be used to create the config file for the build directory.
+  # These config files will be used by the examples to find the ArrayFire
+  # libraries
+  set(INCLUDE_DIRS "${ArrayFire_SOURCE_DIR}/include" "${ArrayFire_BINARY_DIR}/include")
+  set(CMAKE_DIR "${ArrayFire_BINARY_DIR}/cmake")
+  configure_package_config_file(
+    ${CMAKE_MODULE_PATH}/ArrayFireConfig.cmake.in
+    ArrayFireConfig.cmake
+    INSTALL_DESTINATION "${ArrayFire_BINARY_DIR}"
+    PATH_VARS INCLUDE_DIRS CMAKE_DIR
+    INSTALL_PREFIX "${ArrayFire_BINARY_DIR}"
+    )
 
-# Registers the current build directory with the user's cmake config. This will
-# create a file at $HOME/.cmake/packages/ArrayFire which will point to this source
-# build directory.
-# TODO(umar): Disable for now. Causing issues with builds on windows.
-#export(PACKAGE ArrayFire)
+    # Registers the current build directory with the user's cmake config. This will
+    # create a file at $HOME/.cmake/packages/ArrayFire which will point to this source
+    # build directory.
+    # TODO(umar): Disable for now. Causing issues with builds on windows.
+    #export(PACKAGE ArrayFire)
+endif()
 
 # Unset the visibility to avoid setting policy commands for older versions of
 # CMake for examples and tests.
 unset(CMAKE_CXX_VISIBILITY_PRESET)
 
-configure_file(
-  ${CMAKE_MODULE_PATH}/CTestCustom.cmake
-  ${ArrayFire_BINARY_DIR}/CTestCustom.cmake)
 
-include(CTest)
 
 # Handle depricated BUILD_TEST variable if found.
 if(BUILD_TEST)
+  include(CTest)
+
+  configure_file(
+    ${CMAKE_MODULE_PATH}/CTestCustom.cmake
+    ${ArrayFire_BINARY_DIR}/CTestCustom.cmake)
+
   set(BUILD_TESTING ${BUILD_TEST})
 endif()
 
-- 
2.17.1

